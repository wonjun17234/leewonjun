총을 발사하면 방아쇠 코루틴 함수가 실행되고 선형보간을 활용해 방아쇠가 회전하며 방아쇠가 당겨지는 애니메이션을 구현했다.
만약 총알이 남아있으면 총알을 발사하는 함수와 슬라이드 코루틴 함수를 실행하고 총알이 없으면 슬라이드 코루틴 함수만 실행한다. 이후 방아쇠을 원위치로 회전한다.
슬라이드 코루틴 함수가 실행되면 선형보간을 활용해 슬라이드를 뒤로 움직이는 애니메이션이 실행된다.
만약 총알이 남아있으면 탄피가 튀는 함수를 호출하고 아니면 호출하지 않는다. 이후 슬라이드를 원위치로 움직인다.
탄피가 튀는 함수는 미리 할당한 탄피 프리펩을 인스턴스화 시킨 후 미리 지정한 탄피배출구에 스폰하여 RigidBody의 AddForce 함수를 이용해 탄피가 튀는 움직임을 구현했다. 
총알이 다 떨어지면 탄창의 mesh를 총알이 없는 탄창으로 변경하였다

파티클 시스템을 활용하여 총염 및 총알의 궤적을 구현하였고,
파티클 시스템의 OnParticleCollision으로 Particle과 Target이 충돌한 곳의 위치에 탄흔을 생성하였다.

1인칭 카메라는 재장전과 시점변환, 3인칭 카메라에서는 재장전 및 줌인, 줌아웃과 시점변환을 구현하였다.
줌인, 줌아웃은 버튼을 누르면 각각 매개변수로 1과 -1을 보내고 int 변수인 sign에 저장한뒤 버튼을 눌렀는지를 확인하는 bool 변수인 isClicked을 true로 변경한다.
LateUpdate 함수에서 isClicked을 계속 확인하여 true이면 sign을 곱하여 position을 움직인다. 이 거리는 총과 카메라의 거리를 Vector3.Distance로 구한 뒤 미리 지정한 최소/최대값을 못 넘기게 한다.
줌인, 줌아웃 버튼을 때면 isClicked를 false로 변경하며 더 이상 카메라가 안움직인다.
시점변환은 GameObject.SetActive변수와 Behaviour.enabled변수를 활용해 카메라 2개를 껏다 키는 방식으로 구현하였습니다
재장전은 탄창을 미리 지정한 위치까지 선형보간을 이용해 이동후 RigidBody.useGravity를 활성화해 떨어지게 구현하였고, 
미리 할당한 탄창 프리펩을 지정한 위치에 생성후 다시 선형보간을 이용해 원래 위치로 이동시킨다


출처
